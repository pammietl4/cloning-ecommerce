name: Build, Scan and Push Microservices

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:
  build_scan:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout the code from the GitHub repository
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up Docker Buildx for advanced image builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. Login to Docker Hub using secrets for secure authentication
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 4. Initialize CodeQL for static code security analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript, go, java  # Adjust languages based on your microservices

    # 5. Run CodeQL analysis for vulnerabilities and code quality
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    # 6. Detect changed microservices, then build, scan, and push images accordingly
    - name: Build, Scan, and Push Changed Images
      run: |
        # Microservices to manage
        services=("user-service" "product-service" "cart-service" "order-service" "payment-service")

        # Detect changes based on the workflow trigger type
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
          git fetch origin ${{ github.base_ref }}
          CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }})
        else
          git fetch --prune --unshallow || true
          CHANGED=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }})
        fi

        # Set the version tag using the GitHub Actions run number
        VERSION="v1.${{ github.run_number }}"
        echo "🔄 Starting build process... Version: $VERSION"

        # Process each microservice
        for service in "${services[@]}"; do
          # Build only if relevant files are changed
          if echo "$CHANGED" | grep "^$service/" > /dev/null; then
            if [ -d "$service" ]; then
              echo "🚀 Building Docker image for $service ..."
              docker build -t ${{ secrets.DOCKER_USERNAME }}/$service:latest -t ${{ secrets.DOCKER_USERNAME }}/$service:$VERSION ./$service

              echo "🔍 Scanning built Docker image with Trivy ..."
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${{ secrets.DOCKER_USERNAME }}/$service:latest

              echo "📤 Pushing Docker image to Docker Hub ..."
              docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
              docker push ${{ secrets.DOCKER_USERNAME }}/$service:$VERSION

              echo "✅ $service build, scan & push completed"
            else
              echo "⚠️ Skipping $service — folder not found"
            fi
          else
            echo "⏭️ Skipping $service — no changes detected"
          fi
        done

        echo "🎉 All relevant microservices have been processed"
      # Steps:
      # - Finds changed microservice folders only
      # - Builds, scans, and pushes only what is required
      # - Keeps the output clean and easy to track