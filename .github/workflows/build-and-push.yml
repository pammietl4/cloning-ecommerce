name: Build, Scan and Push Microservices

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  build_scan:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up Docker Buildx for advanced image builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. Login to Docker Hub using secrets for secure authentication
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 4. Auto-detect source languages for CodeQL
    - name: Auto-detect source languages
      id: detect_langs
      run: |
        langs=()
        if ls **/*.js **/*.jsx **/*.ts **/*.tsx > /dev/null 2>&1; then langs+=("javascript"); fi
        if ls **/*.py > /dev/null 2>&1; then langs+=("python"); fi
        if ls **/*.go > /dev/null 2>&1; then langs+=("go"); fi
        if ls **/*.java > /dev/null 2>&1; then langs+=("java"); fi
        if ls **/*.cs > /dev/null 2>&1; then langs+=("csharp"); fi
        if ls **/*.cpp **/*.c **/*.cc **/*.cxx > /dev/null 2>&1; then langs+=("cpp"); fi
        if [ ${#langs[@]} -gt 0 ]; then
          echo "Detected languages: ${langs[@]}"
          echo "langs=${langs[*]}" >> $GITHUB_OUTPUT
        else
          echo "No supported languages detected"
          echo "langs=" >> $GITHUB_OUTPUT
        fi

    # 5. Initialize CodeQL if any supported language is detected
    - name: Initialize CodeQL
      if: steps.detect_langs.outputs.langs != ''
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ steps.detect_langs.outputs.langs }}

    # 6. Run CodeQL Analysis if initialization was done
    - name: Run CodeQL Analysis
      if: steps.detect_langs.outputs.langs != ''
      uses: github/codeql-action/analyze@v3

    # 7. Detect changed services, build, push, and scan images
    - name: Build, Push, and Prepare List of Changed Images
      id: buildpush
      run: |
        services=("user-service" "product-service" "cart-service" "order-service" "payment-service")
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
          git fetch origin ${{ github.base_ref }}
          CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }})
        else
          git fetch --prune --unshallow || true
          CHANGED=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }})
        fi
        VERSION="v1.${{ github.run_number }}"
        echo "🔄 Starting build process... Version: $VERSION"
        images=()
        for service in "${services[@]}"; do
          if echo "$CHANGED" | grep "^$service/" > /dev/null; then
            if [ -d "$service" ]; then
              echo "🚀 Building Docker image for $service ..."
              docker build -t ${{ secrets.DOCKER_USERNAME }}/$service:latest -t ${{ secrets.DOCKER_USERNAME }}/$service:$VERSION ./$service
              echo "📤 Pushing Docker image to Docker Hub ..."
              docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
              docker push ${{ secrets.DOCKER_USERNAME }}/$service:$VERSION
              images+=("${{ secrets.DOCKER_USERNAME }}\/$service:latest")
              echo "✅ $service build & push completed"
            else
              echo "⚠️ Skipping $service — folder not found"
            fi
          else
            echo "⏭️ Skipping $service — no changes detected"
          fi
        done
        # Set output for downstream Trivy scan
        echo "images=${images[*]}" >> $GITHUB_OUTPUT
        echo "IMAGES=${images[*]}" >> $GITHUB_ENV
        echo "🎉 All relevant microservices have been processed"

    # 8. Matrix scan all images built/pushed with Trivy
    - name: Scan all built Docker images with Trivy
      if: steps.buildpush.outputs.images != ''
      uses: aquasecurity/trivy-action@v0.22.0
      with:
        image-ref: ${{ matrix.image }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
      strategy:
        matrix:
          image: ${{ fromJson(env.IMAGES) }}