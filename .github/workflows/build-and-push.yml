name: Build, Scan and Push Microservices

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  build_scan:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout your repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. Log in to Docker Hub securely
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 4. Auto-detect languages present for code security scan
    - name: Auto-detect source languages
      id: detect_langs
      run: |
        langs=()
        if ls **/*.js **/*.jsx **/*.ts **/*.tsx > /dev/null 2>&1; then langs+=("javascript"); fi
        if ls **/*.py > /dev/null 2>&1; then langs+=("python"); fi
        if ls **/*.go > /dev/null 2>&1; then langs+=("go"); fi
        if ls **/*.java > /dev/null 2>&1; then langs+=("java"); fi
        if ls **/*.cs > /dev/null 2>&1; then langs+=("csharp"); fi
        if ls **/*.cpp **/*.c **/*.cc **/*.cxx > /dev/null 2>&1; then langs+=("cpp"); fi
        # Add more language detection as needed
        if [ ${#langs[@]} -gt 0 ]; then
          echo "Detected languages: ${langs[@]}"
          echo "langs=${langs[*]}" >> $GITHUB_OUTPUT
        else
          echo "No supported languages detected"
          echo "langs=" >> $GITHUB_OUTPUT
        fi

    # 5. Initialize CodeQL only for languages present
    - name: Initialize CodeQL
      if: steps.detect_langs.outputs.langs != ''
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ steps.detect_langs.outputs.langs }}

    # 6. Run CodeQL Analysis for static code security
    - name: Run CodeQL Analysis
      if: steps.detect_langs.outputs.langs != ''
      uses: github/codeql-action/analyze@v3

    # 7. Build, scan, and push Docker images for changed services with complete summary
    - name: Build, Scan, and Push Changed Images
      run: |
        # List of microservices to manage
        services=("user-service" "product-service" "cart-service" "order-service" "payment-service")
        
        # Arrays to track status of each service
        built=()
        scanned=()
        pushed=()
        skipped=()
        failed=()

        # Detect changed services based on trigger type
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
          git fetch origin ${{ github.base_ref }}
          CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }})
        else
          git fetch --prune --unshallow || true
          CHANGED=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }})
        fi

        # Set version using GitHub Actions run number
        VERSION="v1.${{ github.run_number }}"
        echo "üîÑ Starting build process... Version: $VERSION"

        # Process each microservice
        for service in "${services[@]}"; do
          # Check if service has changes
          if echo "$CHANGED" | grep "^$service/" > /dev/null; then
            if [ -d "$service" ]; then
              echo "üöÄ Building Docker image for $service ..."
              
              # Build the Docker image
              if docker build -t ${{ secrets.DOCKER_USERNAME }}/$service:latest -t ${{ secrets.DOCKER_USERNAME }}/$service:$VERSION ./$service; then
                built+=("$service")
                echo "‚úÖ Build successful for $service"
              else
                failed+=("$service")
                echo "‚ùå Build FAILED for $service"
                continue
              fi

              echo "üîç Scanning Docker image with Trivy for vulnerabilities ..."
              
              # Scan with Trivy for HIGH/CRITICAL vulnerabilities
              if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL \
                ${{ secrets.DOCKER_USERNAME }}/$service:latest; then
                echo "üü¢ Trivy scan PASSED: $service image has NO high/critical vulnerabilities"
                scanned+=("$service")
              else
                failed+=("$service")
                echo "‚ùå Trivy scan FAILED for $service - vulnerabilities found, NOT pushing"
                continue
              fi

              echo "üì§ Pushing Docker images to Docker Hub ..."
              
              # Push both latest and versioned tags
              if docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest \
                && docker push ${{ secrets.DOCKER_USERNAME }}/$service:$VERSION; then
                pushed+=("$service")
                echo "‚úÖ Push successful for $service"
              else
                failed+=("$service")
                echo "‚ùå Push FAILED for $service"
              fi

              echo "‚úÖ $service build, scan & push completed successfully"
            else
              skipped+=("$service")
              echo "‚ö†Ô∏è Skipping $service ‚Äî folder not found"
            fi
          else
            skipped+=("$service")
            echo "‚è≠Ô∏è Skipping $service ‚Äî no changes detected"
          fi
        done

        # Final comprehensive summary
        echo ""
        echo "================ PIPELINE SUMMARY ================"
        echo "Version: $VERSION"
        echo "Trigger: $GITHUB_EVENT_NAME"
        [ ${#built[@]} -gt 0 ] && echo "‚úÖ Built:     ${built[*]}"
        [ ${#scanned[@]} -gt 0 ] && echo "üîç Scanned:   ${scanned[*]}"
        [ ${#pushed[@]} -gt 0 ] && echo "üì§ Pushed:    ${pushed[*]}"
        [ ${#skipped[@]} -gt 0 ] && echo "‚è≠Ô∏è Skipped:   ${skipped[*]}"
        [ ${#failed[@]} -gt 0 ] && echo "‚ùå Failed:    ${failed[*]}"
        echo "================================================="
        
        # Exit with error if any service failed
        if [ ${#failed[@]} -gt 0 ]; then
          echo "‚ùå Pipeline completed with failures"
          exit 1
        else
          echo "üéâ Pipeline completed successfully"
        fi